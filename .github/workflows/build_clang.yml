name: LLVM Clang
defaults:
  run:
    shell: bash

on:
  workflow_dispatch:

jobs:
  build_llvm:
    name: Building LLVM and Clang
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
    container:
        image: docker://ghcr.io/shinchiro/archlinux:latest
    steps:
      - name: Setup git config
        run: |
          git config --global user.name "github-actions"
          git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git config --global pull.rebase true
          git config --global rebase.autoStash true
          git config --global fetch.prune true
          git config --global --add safe.directory $PWD

      - uses: actions/checkout@main
        with:
          ref: master

      - name: Loading clang root
        uses: actions/cache/restore@main
        with:
          path: clang_root
          key: ${{ secrets.CACHE_VERSION }}-clang_root-${{ github.run_id }}
          restore-keys: |
            ${{ secrets.CACHE_VERSION }}-clang_root

      - name: Loading repository cache
        uses: actions/cache/restore@main
        with:
          path: src_packages
          key: ${{ secrets.CACHE_VERSION }}-repository-${{ github.run_id }}
          restore-keys: |
            ${{ secrets.CACHE_VERSION }}-repository

      - name: Loading rust toolchain cache
        uses: actions/cache/restore@main
        with:
          path: install_rustup
          key: ${{ secrets.CACHE_VERSION }}-rust_toolchain-${{ github.run_id }}
          restore-keys: |
            ${{ secrets.CACHE_VERSION }}-rust_toolchain

      - name: Building x86_64 toolchain
        run: |
          cmake -DTARGET_ARCH=x86_64-w64-mingw32 -DCOMPILER_TOOLCHAIN=clang -DALWAYS_REMOVE_BUILDFILES=ON -DCMAKE_INSTALL_PREFIX=$PWD/clang_root -DSINGLE_SOURCE_LOCATION=$PWD/src_packages -DRUSTUP_LOCATION=$PWD/install_rustup -G Ninja -Bbuild_x86_64 -H.
          ninja -C build_x86_64 llvm
          ninja -C build_x86_64 llvm-clang
          ninja -C build_x86_64 rustup

      - name: Building i686 toolchain
        run: |
          cmake -DTARGET_ARCH=i686-w64-mingw32 -DCOMPILER_TOOLCHAIN=clang -DALWAYS_REMOVE_BUILDFILES=ON -DCMAKE_INSTALL_PREFIX=$PWD/clang_root -DSINGLE_SOURCE_LOCATION=$PWD/src_packages -DRUSTUP_LOCATION=$PWD/install_rustup -G Ninja -Bbuild_i686 -H.
          ninja -C build_i686 llvm-clang

      - name: Building aarch64 toolchain
        run: |
          cmake -DTARGET_ARCH=aarch64-w64-mingw32 -DCOMPILER_TOOLCHAIN=clang -DALWAYS_REMOVE_BUILDFILES=ON -DCMAKE_INSTALL_PREFIX=$PWD/clang_root -DSINGLE_SOURCE_LOCATION=$PWD/src_packages -DRUSTUP_LOCATION=$PWD/install_rustup -G Ninja -Bbuild_aarch64 -H.
          ninja -C build_aarch64 llvm-clang

      - name: Collecting logs
        if: always()
        run: |
          mkdir -p build_x86_64_logs build_i686_logs build_aarch64_logs
          cp -fr $(find build_x86_64 -type f -iname "*-*.log") build_x86_64_logs || true
          cp -fr $(find build_i686 -type f -iname "*-*.log") build_i686_logs || true
          cp -fr $(find build_aarch64 -type f -iname "*-*.log") build_aarch64_logs || true
          7z a -m0=lzma2 -mx=9 -ms=on logs.7z build*logs

      - name: Uploading logs
        uses: actions/upload-artifact@master
        if: always()
        with:
          name: logs
          path: logs.7z
          retention-days: 1

      - name: Saving clang root
        uses: actions/cache/save@main
        if: always()
        with:
          path: clang_root
          key: ${{ secrets.CACHE_VERSION }}-clang_root-${{ github.run_id }}

      - name: Saving repository cache
        uses: actions/cache/save@main
        if: always()
        with:
          path: src_packages
          key: ${{ secrets.CACHE_VERSION }}-repository-${{ github.run_id }}

      - name: Saving rust toolchain cache
        uses: actions/cache/save@main
        if: always()
        with:
          path: install_rustup
          key: ${{ secrets.CACHE_VERSION }}-rust_toolchain-${{ github.run_id }}
